module Expressions 

imports Common Base

context-free syntax 

  TypeExp.IntT  = <int>
  TypeExp.BoolT = <bool>
  
context-free syntax 

  Exp       = <(<Exp>)> {bracket}
  Exp.Int   = <<INT>>
  Exp.Add   = <<Exp> + <Exp>> {left}
  Exp.Mul   = <<Exp> * <Exp>> {left}
  
  Exp.Eq    = <<Exp> == <Exp>> {non-assoc}
  
  Exp.True  = <true>
  Exp.False = <false>
  Exp.Not   = <!<Exp>>
  Exp.And   = <<Exp> && <Exp>> {left}
  Exp.Or    = <<Exp> || <Exp>> {left}
  
context-free priorities

  Exp.Mul 
  > Exp.Add 
  > Exp.Eq
  > Exp.Not
  > Exp.And
  > Exp.Or
 
template options

  ID = keyword {reject}